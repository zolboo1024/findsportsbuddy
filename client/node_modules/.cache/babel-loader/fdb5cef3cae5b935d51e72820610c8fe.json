{"ast":null,"code":"var _jsxFileName = \"/home/zolboo/Projects/findsportsbuddy/client/src/Components/HostEventPage.js\";\n//React page to host a sporting event\n//Zolboo\nimport React, { Component } from 'react';\nimport 'bulma/css/bulma.min.css';\nimport authService from '../auth/authService';\nimport authHeader from '../auth/authHeader';\nimport axios from 'axios';\nimport AskLocation from './HostEventForm/AskLocation';\nimport AskSport from './HostEventForm/AskSport';\nimport AskTime from './HostEventForm/AskTime';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CONFIG = require('./../config.json');\n\nclass HostEventPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      userId: '',\n      sport: '',\n      location: '',\n      start_time: '',\n      end_time: '',\n      num_participants: 1,\n      description: 'usercreated',\n      errorMessage: '',\n      returnMessage: '',\n      step: 1\n    };\n    this.handleSport = this.handleSport.bind(this);\n    this.handleLocation = this.handleLocation.bind(this);\n    this.handleStartTime = this.handleStartTime.bind(this);\n    this.handleEndTime = this.handleEndTime.bind(this);\n    this.handleNumParticipants = this.handleNumParticipants.bind(this);\n    this.handleDescription = this.handleDescription.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleErrorMessage = this.handleErrorMessage.bind(this);\n    this.handleReturnMessage = this.handleReturnMessage.bind(this);\n    this.checkInputs = this.checkInputs.bind(this);\n    this.redirectToMaps = this.redirectToMaps.bind(this);\n    this.nextStep = this.nextStep.bind(this);\n    this.prevStep = this.prevStep.bind(this);\n  } //first check if the user is logged in\n  //if not, we cannot show this page\n\n\n  componentWillMount() {\n    var user = authService.getCurrentUser(); //if it returns the token\n\n    if (user[\"accessToken\"]) {\n      var id = user[\"id\"];\n      this.setState({\n        loggedIn: true,\n        userId: id\n      });\n    } else {\n      //if not logged in, redirect to the login page\n      this.props.history.push(\"/login\");\n      window.location.reload();\n    }\n  }\n\n  redirectToMaps() {\n    this.props.history.push(\"/sportsMap\");\n    window.location.reload();\n  }\n\n  handleSport(newSport) {\n    this.setState({\n      sport: newSport\n    });\n  }\n\n  handleLocation(lat, lng) {\n    this.setState({\n      location: lat + \" \" + lng\n    });\n  }\n\n  handleStartTime(newStartTime) {\n    this.setState({\n      start_time: newStartTime\n    });\n  }\n\n  handleEndTime(newEndTime) {\n    this.setState({\n      end_time: newEndTime\n    });\n  }\n\n  handleNumParticipants(event) {\n    this.setState({\n      num_participants: event.target.value\n    });\n  }\n\n  handleDescription(event) {\n    this.setState({\n      description: event.target.value\n    });\n  } //change which step it is on\n\n\n  nextStep(event) {\n    var next = this.state.step + 1;\n    this.setState({\n      step: next\n    });\n  }\n\n  prevStep(event) {\n    var prev = this.state.step - 1;\n    this.setState({\n      step: prev\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); //if the form is completely filled out\n\n    if (this.checkInputs()) {\n      //make backend req to create the event in the DB.\n      //the second parameter is the body\n      axios.post(CONFIG.API_URL + \"/events/create\", {\n        \"userId\": this.state.userId,\n        \"sport\": this.state.sport,\n        \"location\": this.state.location,\n        \"start_time\": this.state.start_time,\n        \"end_time\": this.state.end_time,\n        \"participants\": this.state.userId,\n        \"num_participants\": this.state.num_participants,\n        \"description\": this.state.description\n      }, {\n        headers: authHeader()\n      }).then(() => {\n        //right now, go to the front page\n        this.handleReturnMessage(\"Event successfully created!\");\n      }, error => {\n        const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n        console.log(resMessage);\n      });\n    }\n  } //check if form is filled out.\n  //returns true only if everything is filled out\n\n\n  checkInputs() {\n    if (this.state.sport === '') {\n      this.handleErrorMessage(\"Please tell us what sport you are playing to find a match\");\n      return false;\n    } else if (this.state.location === '') {\n      this.handleErrorMessage(\"Please tell us where you are playing to find a match\");\n      return false;\n    } else if (this.state.start_time === '') {\n      this.handleErrorMessage(\"Please tell us when you are playing to find a match\");\n      return false;\n    } else if (this.state.end_time === '') {\n      this.handleErrorMessage(\"Please tell us when you are playing to find a match\");\n      return false;\n    } else if (this.state.num_participants === '') {\n      this.handleErrorMessage(\"Please tell us how many participants will be there to find a match\");\n      return false;\n    }\n\n    return true;\n  } //any errors that may arise during submission\n\n\n  handleErrorMessage(message) {\n    this.setState({\n      errorMessage: message\n    });\n  } //display message that was returned after the submission\n\n\n  handleReturnMessage(message) {\n    this.setState({\n      returnMessage: message\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"HostEvent\",\n      children: [this.state.step == 1 && /*#__PURE__*/_jsxDEV(AskSport, {\n        onSportChange: this.handleSport,\n        nextStep: this.nextStep\n      }, \"1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), this.state.step == 2 && /*#__PURE__*/_jsxDEV(AskLocation, {\n        handleLocation: this.handleLocation,\n        nextStep: this.nextStep,\n        prevStep: this.prevStep\n      }, \"2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), this.state.step == 3 && /*#__PURE__*/_jsxDEV(AskTime, {\n        handleStartTime: this.handleStartTime,\n        handleEndTime: this.handleEndTime,\n        prevStep: this.prevStep,\n        handleNumParticipants: this.handleNumParticipants,\n        handleSubmit: this.handleSubmit,\n        returnMessage: this.state.returnMessage,\n        redirectToMaps: this.redirectToMaps\n      }, \"3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default HostEventPage;","map":{"version":3,"sources":["/home/zolboo/Projects/findsportsbuddy/client/src/Components/HostEventPage.js"],"names":["React","Component","authService","authHeader","axios","AskLocation","AskSport","AskTime","CONFIG","require","HostEventPage","constructor","props","state","loggedIn","userId","sport","location","start_time","end_time","num_participants","description","errorMessage","returnMessage","step","handleSport","bind","handleLocation","handleStartTime","handleEndTime","handleNumParticipants","handleDescription","handleSubmit","handleErrorMessage","handleReturnMessage","checkInputs","redirectToMaps","nextStep","prevStep","componentWillMount","user","getCurrentUser","id","setState","history","push","window","reload","newSport","lat","lng","newStartTime","newEndTime","event","target","value","next","prev","preventDefault","post","API_URL","headers","then","error","resMessage","response","data","message","toString","console","log","render"],"mappings":"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","sourcesContent":["//React page to host a sporting event\n//Zolboo\nimport React, { Component } from 'react';\nimport 'bulma/css/bulma.min.css';\nimport authService from '../auth/authService';\nimport authHeader from '../auth/authHeader';\nimport axios from 'axios';\nimport AskLocation from './HostEventForm/AskLocation';\nimport AskSport from './HostEventForm/AskSport';\nimport AskTime from './HostEventForm/AskTime';\nvar CONFIG = require('./../config.json');\n\nclass HostEventPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: false,\n            userId: '',\n            sport: '',\n            location: '',\n            start_time: '',\n            end_time: '',\n            num_participants: 1,\n            description: 'usercreated',\n            errorMessage: '',\n            returnMessage: '',\n            step: 1\n        };\n        this.handleSport = this.handleSport.bind(this);\n        this.handleLocation = this.handleLocation.bind(this);\n        this.handleStartTime = this.handleStartTime.bind(this);\n        this.handleEndTime = this.handleEndTime.bind(this);\n        this.handleNumParticipants = this.handleNumParticipants.bind(this);\n        this.handleDescription = this.handleDescription.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleErrorMessage = this.handleErrorMessage.bind(this);\n        this.handleReturnMessage = this.handleReturnMessage.bind(this);\n        this.checkInputs = this.checkInputs.bind(this);\n        this.redirectToMaps = this.redirectToMaps.bind(this);\n        this.nextStep = this.nextStep.bind(this);\n        this.prevStep = this.prevStep.bind(this);\n    }\n\n    //first check if the user is logged in\n    //if not, we cannot show this page\n    componentWillMount() {\n        var user = authService.getCurrentUser();\n        //if it returns the token\n        if (user[\"accessToken\"]) {\n            var id = user[\"id\"];\n            this.setState({\n                loggedIn: true,\n                userId: id\n            });\n        }\n        else {\n            //if not logged in, redirect to the login page\n            this.props.history.push(\"/login\");\n            window.location.reload();\n        }\n    }\n    redirectToMaps() {\n        this.props.history.push(\"/sportsMap\");\n        window.location.reload();\n    }\n    handleSport(newSport) {\n        this.setState({ sport: newSport });\n    }\n\n    handleLocation(lat, lng) {\n        this.setState({ location: lat + \" \" + lng });\n    }\n\n    handleStartTime(newStartTime) {\n        this.setState({ start_time: newStartTime });\n    }\n\n    handleEndTime(newEndTime) {\n        this.setState({ end_time: newEndTime });\n    }\n\n    handleNumParticipants(event) {\n        this.setState({ num_participants: event.target.value });\n    }\n\n    handleDescription(event) {\n        this.setState({ description: event.target.value });\n    }\n    //change which step it is on\n    nextStep(event) {\n        var next = this.state.step + 1;\n        this.setState({ step: next });\n    }\n    prevStep(event) {\n        var prev = this.state.step - 1;\n        this.setState({ step: prev });\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        //if the form is completely filled out\n        if (this.checkInputs()) {\n            //make backend req to create the event in the DB.\n            //the second parameter is the body\n            axios.post(CONFIG.API_URL + \"/events/create\", {\n                \"userId\": this.state.userId,\n                \"sport\": this.state.sport,\n                \"location\": this.state.location,\n                \"start_time\": this.state.start_time,\n                \"end_time\": this.state.end_time,\n                \"participants\": this.state.userId,\n                \"num_participants\": this.state.num_participants,\n                \"description\": this.state.description\n            }, {\n                headers: authHeader()\n            }).then(\n                () => {\n                    //right now, go to the front page\n                    this.handleReturnMessage(\"Event successfully created!\");\n                },\n                error => {\n                    const resMessage =\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString();\n                    console.log(resMessage);\n                }\n            );\n        }\n    }\n\n    //check if form is filled out.\n    //returns true only if everything is filled out\n    checkInputs() {\n        if (this.state.sport === '') {\n            this.handleErrorMessage(\"Please tell us what sport you are playing to find a match\");\n            return false;\n        }\n        else if (this.state.location === '') {\n            this.handleErrorMessage(\"Please tell us where you are playing to find a match\");\n            return false;\n        }\n        else if (this.state.start_time === '') {\n            this.handleErrorMessage(\"Please tell us when you are playing to find a match\");\n            return false;\n        }\n        else if (this.state.end_time === '') {\n            this.handleErrorMessage(\"Please tell us when you are playing to find a match\");\n            return false;\n        }\n        else if (this.state.num_participants === '') {\n            this.handleErrorMessage(\"Please tell us how many participants will be there to find a match\");\n            return false;\n        }\n        return true;\n    }\n    //any errors that may arise during submission\n    handleErrorMessage(message) {\n        this.setState({ errorMessage: message });\n    }\n\n    //display message that was returned after the submission\n    handleReturnMessage(message) {\n        this.setState({ returnMessage: message });\n    }\n\n    render() {\n        return (\n            <div className=\"HostEvent\">\n                {\n                    this.state.step == 1 &&\n                    <AskSport\n                        onSportChange={this.handleSport}\n                        nextStep={this.nextStep}\n                        key=\"1\">\n                    </AskSport>\n                }\n                {\n                    this.state.step == 2 &&\n                    <AskLocation\n                        handleLocation={this.handleLocation}\n                        nextStep={this.nextStep}\n                        prevStep={this.prevStep}\n                        key=\"2\">\n                    </AskLocation>\n                }\n                {\n                    this.state.step == 3 &&\n                    <AskTime\n                        handleStartTime={this.handleStartTime}\n                        handleEndTime={this.handleEndTime}\n                        prevStep={this.prevStep}\n                        handleNumParticipants={this.handleNumParticipants}\n                        handleSubmit={this.handleSubmit}\n                        returnMessage={this.state.returnMessage}\n                        redirectToMaps={this.redirectToMaps}\n                        key=\"3\">\n                    </AskTime>\n                }\n            </div>\n        );\n    }\n}\n\nexport default HostEventPage;\n"]},"metadata":{},"sourceType":"module"}