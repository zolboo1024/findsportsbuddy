{"ast":null,"code":"var _jsxFileName = \"/home/zolboo/Projects/findsportsbuddy/client/src/Components/HostEventForm/AskLocation.js\",\n    _s = $RefreshSig$();\n\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport mapStyles from './../mapStyles';\nimport React, { useState } from 'react';\nimport CustomNavbar from '../CustomNavbar';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'bulma/css/bulma.min.css';\nimport './AskLocation.css';\nimport { parse } from 'dotenv';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CONFIG = require('./../../config.json'); //function that returns the custom map\n\n\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true\n};\nvar center = {\n  lat: 38.8977,\n  lng: 77.0365\n};\nexport default function AskLocation(props) {\n  _s();\n\n  const [selected, setSelected] = useState(null); //load the maps\n\n  const libraries = [\"places\"];\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: CONFIG.JS_MAPS_KEY,\n    libraries\n  });\n  const [marker, setMarker] = React.useState();\n  if (loadError) return \"LoadError\";\n  if (!isLoaded) return \"Loading\";\n  const savedLocation = localStorage.getItem(\"selectedLocation\");\n\n  if (savedLocation) {\n    const split = savedLocation.split(' ');\n    center = {\n      lat: parseFloat(split[0]),\n      lng: parseFloat(split[1])\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CustomNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero is-fullheight-with-navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        id: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"title has-text-black\",\n          children: \"Where would you like to play?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Search for a specific location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GooglePlacesAutocomplete, {\n          apiKey: CONFIG.PLACES_KEy,\n          selectProps: {\n            selected,\n            onChange: setSelected\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), marker && /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"box\",\n        id: \"rightarrow\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"image\",\n          alt: \"right arrow\",\n          src: window.location.origin + \"/svgs/rightarrow.svg\",\n          onClick: props.nextStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: 15,\n        center: center,\n        options: options,\n        onClick: event => {\n          setMarker({\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          }); //save the location into the parent's state\n\n          props.handleLocation(event.latLng.lat(), event.latLng.lng());\n        },\n        children: marker && /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: marker.lat,\n            lng: marker.lng\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AskLocation, \"uu1bOGny541g6/Lg8NWHs/oEtYI=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = AskLocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"AskLocation\");","map":{"version":3,"sources":["/home/zolboo/Projects/findsportsbuddy/client/src/Components/HostEventForm/AskLocation.js"],"names":["GoogleMap","useLoadScript","Marker","mapStyles","React","useState","CustomNavbar","GooglePlacesAutocomplete","parse","CONFIG","require","mapContainerStyle","width","height","options","styles","disableDefaultUI","center","lat","lng","AskLocation","props","selected","setSelected","libraries","isLoaded","loadError","googleMapsApiKey","JS_MAPS_KEY","marker","setMarker","savedLocation","localStorage","getItem","split","parseFloat","PLACES_KEy","onChange","window","location","origin","nextStep","event","latLng","handleLocation"],"mappings":"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","sourcesContent":["import { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport mapStyles from './../mapStyles';\nimport React, { useState } from 'react';\nimport CustomNavbar from '../CustomNavbar';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport 'bulma/css/bulma.min.css';\nimport './AskLocation.css';\nimport { parse } from 'dotenv';\nvar CONFIG = require('./../../config.json');\n\n//function that returns the custom map\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\"\n}\nconst options = {\n    styles: mapStyles,\n    disableDefaultUI: true\n}\n\nvar center = {\n    lat: 38.8977,\n    lng: 77.0365\n}\nexport default function AskLocation(props) {\n    const [selected, setSelected] = useState(null);\n    //load the maps\n    const libraries = [\"places\"];\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey: CONFIG.JS_MAPS_KEY,\n        libraries\n    });\n    const [marker, setMarker] = React.useState();\n    if (loadError) return \"LoadError\";\n    if (!isLoaded) return \"Loading\";\n    const savedLocation = localStorage.getItem(\"selectedLocation\");\n    if (savedLocation) {\n        const split = savedLocation.split(' ')\n        center = {\n            lat: parseFloat(split[0]),\n            lng: parseFloat(split[1])\n        }\n    }\n    return (\n        <div>\n            <CustomNavbar></CustomNavbar>\n            <div className=\"hero is-fullheight-with-navbar\">\n                <div className=\"box\" id=\"question\">\n                    <h1 class=\"title has-text-black\">\n                        Where would you like to play?\n                    </h1>\n                    <h3>\n                        Search for a specific location:\n                    </h3>\n                    <GooglePlacesAutocomplete\n                        apiKey={CONFIG.PLACES_KEy}\n                        selectProps={{\n                            selected,\n                            onChange: setSelected,\n                        }}\n                    />\n\n                </div>\n                {\n                    marker &&\n                    <div class=\"box\" id=\"rightarrow\">\n                        <input\n                            type=\"image\"\n                            alt=\"right arrow\"\n                            src={window.location.origin + \"/svgs/rightarrow.svg\"}\n                            onClick={props.nextStep}>\n                        </input>\n                    </div>\n                }\n                <GoogleMap\n                    mapContainerStyle={mapContainerStyle}\n                    zoom={15}\n                    center={center}\n                    options={options}\n                    onClick={\n                        (event) => {\n                            setMarker({\n                                lat: event.latLng.lat(),\n                                lng: event.latLng.lng()\n                            });\n                            //save the location into the parent's state\n                            props.handleLocation(event.latLng.lat(), event.latLng.lng());\n                        }\n                    }\n                >\n                    {marker &&\n                        <Marker position={{ lat: marker.lat, lng: marker.lng }}></Marker>\n                    }\n                </GoogleMap>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}